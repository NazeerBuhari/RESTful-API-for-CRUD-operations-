const express = require('express');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(bodyParser.json());

// Simulated in-memory database
const tasks = [];

// Create a new task
app.post('/tasks', (req, res) => {
  const { title, description } = req.body;
  if (!title || !description) {
    return res.status(400).json({ error: 'Title and description are required.' });
  }

  const newTask = {
    id: uuidv4(),
    title,
    description,
  };
  tasks.push(newTask);
  return res.status(201).json(newTask);
});

// Get all tasks
app.get('/tasks', (req, res) => {
  return res.json(tasks);
});

// Get a single task by ID
app.get('/tasks/:id', (req, res) => {
  const task = tasks.find(task => task.id === req.params.id);
  if (!task) {
    return res.status(404).json({ error: 'Task not found.' });
  }
  return res.json(task);
});

// Update a task by ID
app.put('/tasks/:id', (req, res) => {
  const taskIndex = tasks.findIndex(task => task.id === req.params.id);
  if (taskIndex === -1) {
    return res.status(404).json({ error: 'Task not found.' });
  }

  const { title, description } = req.body;
  if (!title || !description) {
    return res.status(400).json({ error: 'Title and description are required.' });
  }

  tasks[taskIndex] = {
    ...tasks[taskIndex],
    title,
    description,
  };

  return res.json(tasks[taskIndex]);
});

// Delete a task by ID
app.delete('/tasks/:id', (req, res) => {
  const taskIndex = tasks.findIndex(task => task.id === req.params.id);
  if (taskIndex === -1) {
    return res.status(404).json({ error: 'Task not found.' });
  }

  const deletedTask = tasks.splice(taskIndex, 1)[0];
  return res.json(deletedTask);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
